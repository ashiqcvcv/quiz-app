{"version":3,"sources":["components/question/Question.js","components/answer/Answer.js","components/QuizMain.js","App.js","serviceWorker.js","index.js"],"names":["Question","props","question","Answer","answer","Object","keys","map","qAnswer","i","className","correctAnswerValue","clickedAnswer","onClick","checkAnswer","key","disabled","correctAnswer","QuizMain","state","questions","1","answers","2","3","correctAnswers","step","score","index","setState","nextQuestion","refreshPage","window","location","reload","fetch","then","response","json","temp","results","forEach","value","escapeHtml","unsafe","replace","correct_answer","incorrect_answers","label","push","array","length","j","Math","floor","random","shuffleArray","reduce","acc","cur","this","Component","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.53321b00.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Question = (props) =>{\r\nreturn <div>\r\n    <h1>{ props.question }</h1>\r\n</div>\r\n\r\n}\r\n\r\nexport default Question\r\n","import React from'react';\r\nimport './Answer.css';\r\n\r\nconst Answer = (props) => {\r\n    let answer = Object.keys(props.answer)\r\n    .map((qAnswer,i)=>(\r\n        <li className = { \r\n            props.correctAnswerValue === props.answer[qAnswer] ? 'correct' :\r\n            props.clickedAnswer === qAnswer ? 'incorrect' : ''\r\n            \r\n        }\r\n        onClick = {() => props.checkAnswer(props.answer[qAnswer],qAnswer)}\r\n        key={qAnswer}> {props.answer[qAnswer]} </li>\r\n    ))\r\n    return (\r\n        <>\r\n        <ul disabled={props.clickedAnswer ? true : false} className=\"Answers\">\r\n            {answer}\r\n        </ul>\r\n        <div>\r\n            {props.correctAnswer ? 'Correct Answer !' :\r\n            props.clickedAnswer ? `Wrong Answer correct answer is ${props.correctAnswerValue}` : ''}\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Answer;","import React, { Component } from 'react'\r\nimport Question from './question/Question';\r\nimport Answer from './answer/Answer';\r\n\r\nexport class QuizMain extends Component {\r\n\r\n    state = {\r\n        questions: {\r\n            1: ''\r\n        },\r\n        answers: {\r\n            1: {\r\n                1: '',\r\n                2: '',\r\n                3: ''\r\n            }\r\n        },\r\n        correctAnswers: {\r\n            1: ''\r\n        },\r\n        correctAnswer: false,\r\n        clickedAnswer: false,\r\n        step: 1,\r\n        score: 0,\r\n        correctAnswerValue: ''\r\n    }\r\n\r\n    componentDidMount(){\r\n        // https://opentdb.com/api_config.php\r\n        fetch('https://opentdb.com/api.php?amount=10')\r\n        .then(response => response.json())\r\n        .then(response =>{\r\n            var temp = {\r\n                questions : {},\r\n                answers : {},\r\n                correctAnswers : {}\r\n            }\r\n            response = response.results\r\n            response.forEach(function(value, key) {\r\n                function escapeHtml(unsafe) {\r\n                    return unsafe\r\n                         .replace(/&amp;/g, \"&\")\r\n                         .replace(/&lt;/g, \"<\")\r\n                         .replace(/&gt;/g, \">\")\r\n                         .replace(/&quot;/g, '\"')\r\n                         .replace(/&#039;/g, \"'\");\r\n                 }\r\n                value.question = escapeHtml(value.question);\r\n                value.correct_answer = escapeHtml(value.correct_answer);\r\n                value.incorrect_answers = value.incorrect_answers.map(function (value, label) {\r\n                    return escapeHtml(value);\r\n                });\r\n                temp.questions[key+1] = value.question;\r\n                temp.correctAnswers[key+1] = value.correct_answer;\r\n                value.incorrect_answers.push(value.correct_answer);\r\n                function shuffleArray(array) {\r\n                    for (let i = array.length - 1; i > 0; i--) {\r\n                        const j = Math.floor(Math.random() * (i + 1));\r\n                        [array[i], array[j]] = [array[j], array[i]];\r\n                    }\r\n                }\r\n                shuffleArray(value.incorrect_answers);\r\n                temp.answers[key+1] = value.incorrect_answers.reduce(function(acc, cur, i) {\r\n                    acc[i+1] = cur;\r\n                    return acc;\r\n                  }, {});\r\n            })\r\n            this.setState({\r\n                questions : temp.questions,\r\n                answers : temp.answers,\r\n                correctAnswers : temp.correctAnswers\r\n            })\r\n        })\r\n    }\r\n\r\n    checkAnswer = (answer,index) => {\r\n        const { correctAnswers, step, score } = this.state;\r\n        if (answer === correctAnswers[step]) {\r\n            this.setState({\r\n                score: score + 1,\r\n                correctAnswer: true,\r\n                clickedAnswer: index,\r\n                correctAnswerValue: correctAnswers[step]\r\n            })\r\n        } else {\r\n            this.setState({\r\n                correctAnswer: false,\r\n                clickedAnswer: index,\r\n                correctAnswerValue: correctAnswers[step]\r\n            })\r\n        }\r\n    }\r\n    nextQuestion = step => {\r\n        this.setState({ step: step + 1, clickedAnswer: 0, correctAnswer: 0 })\r\n    }\r\n    refreshPage = () => {\r\n        window.location.reload(false);\r\n      }\r\n    render() {\r\n        let { questions, step, answers, clickedAnswer, correctAnswer, score, correctAnswerValue } = this.state;\r\n        return (\r\n            <div className='answer'>\r\n                <div className=\"Content\">\r\n                    {\r\n                        step <= Object.keys(questions).length ?\r\n                            (<div>\r\n                                <h1><span className=\"count\">{step} of 10 questions</span></h1>\r\n                                <span className='score'>Score : <span>{score}</span></span>\r\n                                <Question\r\n                                    question={questions[step]}\r\n                                />\r\n                                <Answer\r\n                                    answer={answers[step]}\r\n                                    step={step}\r\n                                    checkAnswer={this.checkAnswer}\r\n                                    correctAnswer={correctAnswer}\r\n                                    clickedAnswer={clickedAnswer}\r\n                                    correctAnswerValue = {correctAnswerValue}\r\n                                />\r\n                                <button onClick={() => this.nextQuestion(this.state.step)}\r\n                                    className=\"NextStep\" disabled={\r\n                                        clickedAnswer && Object.keys(questions).length >= step\r\n                                            ? false : true\r\n                                    } >Next Question</button>\r\n                            </div>) : (\r\n                                <div className=\"finalPage\">\r\n                                    <h1>You have completed the quiz !</h1>\r\n                                    <p>Your score is: {score} of {Object.keys(questions).length}</p>\r\n                                    <p>Thank You</p>\r\n                                    <button onClick={() => this.refreshPage()}\r\n                                    className=\"NextStep\" >Play Again</button>\r\n                                </div>\r\n                            )}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default QuizMain\r\n","import React from 'react';\r\nimport QuizMain from './components/QuizMain'\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        Quiz App\r\n      </header>\r\n      <QuizMain/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}