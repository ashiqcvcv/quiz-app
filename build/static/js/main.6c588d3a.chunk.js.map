{"version":3,"sources":["components/question/Question.js","components/answer/Answer.js","components/QuizMain.js","App.js","serviceWorker.js","index.js"],"names":["Question","props","question","Answer","answer","Object","keys","map","qAnswer","i","className","correctAnswer","clickedAnswer","onClick","checkAnswer","key","disabled","QuizMain","state","questions","1","answers","2","3","correctAnswers","step","score","index","setState","nextQuestion","fetch","then","response","json","temp","results","forEach","value","replace","correct_answer","incorrect_answers","push","array","length","j","Math","floor","random","shuffleArray","reduce","acc","cur","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6c588d3a.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Question.css';\r\n\r\nconst Question = (props) =>{\r\nreturn <div>\r\n    <h1>{ props.question }</h1>\r\n</div>\r\n\r\n}\r\n\r\nexport default Question\r\n","import React from'react';\r\nimport './Answer.css';\r\n\r\nconst Answer = (props) => {\r\n\r\n    let answer = Object.keys(props.answer)\r\n    .map((qAnswer,i)=>(\r\n        <li className = {\r\n            props.correctAnswer && (props.clickedAnswer === qAnswer) ?\r\n            'correct' : \r\n            props.clickedAnswer === qAnswer ?\r\n            'incorrect' : ''\r\n        }\r\n        onClick = {() => props.checkAnswer(props.answer[qAnswer],qAnswer)}\r\n        key={qAnswer}> {props.answer[qAnswer]} </li>\r\n    ))\r\n    return (\r\n        <>\r\n        <ul disabled={props.clickedAnswer ? true : false} className=\"Answers\">\r\n            {answer}\r\n        </ul>\r\n        <div>\r\n            {props.correctAnswer ? 'Correct Answer !' :\r\n            props.clickedAnswer ? 'Wrong Answer' : ''}\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Answer;","import React, { Component } from 'react'\r\nimport './QuizMain.css';\r\nimport Question from './question/Question';\r\nimport Answer from './answer/Answer';\r\n\r\nexport class QuizMain extends Component {\r\n\r\n    state = {\r\n        questions: {\r\n            1: ''\r\n        },\r\n        answers: {\r\n            1: {\r\n                1: '',\r\n                2: '',\r\n                3: ''\r\n            }\r\n        },\r\n        correctAnswers: {\r\n            1: ''\r\n        },\r\n        correctAnswer: false,\r\n        clickedAnswer: false,\r\n        step: 1,\r\n        score: 0\r\n    }\r\n\r\n    componentDidMount(){\r\n        // https://opentdb.com/api_config.php\r\n        fetch('https://opentdb.com/api.php?amount=10')\r\n        .then(response => response.json())\r\n        .then(response =>{\r\n            var temp = {\r\n                questions : {},\r\n                answers : {},\r\n                correctAnswers : {}\r\n            }\r\n            response = response.results\r\n            response.forEach(function(value, key) {\r\n                value.question = value.question.replace(/(&quot)/g,\"\\\"\")\r\n                temp.questions[key+1] = value.question;\r\n                temp.correctAnswers[key+1] = value.correct_answer;\r\n                value.incorrect_answers.push(value.correct_answer);\r\n                function shuffleArray(array) {\r\n                    for (let i = array.length - 1; i > 0; i--) {\r\n                        const j = Math.floor(Math.random() * (i + 1));\r\n                        [array[i], array[j]] = [array[j], array[i]];\r\n                    }\r\n                }\r\n                shuffleArray(value.incorrect_answers);\r\n                temp.answers[key+1] = value.incorrect_answers.reduce(function(acc, cur, i) {\r\n                    acc[i+1] = cur;\r\n                    return acc;\r\n                  }, {});\r\n            })\r\n            this.setState({\r\n                questions : temp.questions,\r\n                answers : temp.answers,\r\n                correctAnswers : temp.correctAnswers\r\n            })\r\n        })\r\n    }\r\n\r\n    checkAnswer = (answer,index) => {\r\n        const { correctAnswers, step, score } = this.state;\r\n        if (answer === correctAnswers[step]) {\r\n            this.setState({\r\n                score: score + 1,\r\n                correctAnswer: true,\r\n                clickedAnswer: index\r\n            })\r\n        } else {\r\n            this.setState({\r\n                correctAnswer: false,\r\n                clickedAnswer: index\r\n            })\r\n        }\r\n    }\r\n    nextQuestion = step => {\r\n        this.setState({ step: step + 1, clickedAnswer: 0, correctAnswer: 0 })\r\n    }\r\n    render() {\r\n        let { questions, step, answers, clickedAnswer, correctAnswer, score } = this.state;\r\n        return (\r\n            <div className='answer'>\r\n                <div className=\"Content\">\r\n                    {\r\n                        step <= Object.keys(questions).length ?\r\n                            (<div>\r\n                                <h1><span>{step} of 10 questions</span></h1>\r\n                                <h1>Score : <span>{score}</span></h1>\r\n                                <Question\r\n                                    question={questions[step]}\r\n                                />\r\n                                <Answer\r\n                                    answer={answers[step]}\r\n                                    step={step}\r\n                                    checkAnswer={this.checkAnswer}\r\n                                    correctAnswer={correctAnswer}\r\n                                    clickedAnswer={clickedAnswer}\r\n                                />\r\n                                <button onClick={() => this.nextQuestion(this.state.step)}\r\n                                    className=\"NextStep\" disabled={\r\n                                        clickedAnswer && Object.keys(questions).length >= step\r\n                                            ? false : true\r\n                                    } >Next Question</button>\r\n                            </div>) : (\r\n                                <div className=\"finalPage\">\r\n                                    <h1>You have completed the quiz !</h1>\r\n                                    <p>Your score is: {score} of {Object.keys(questions).length}</p>\r\n                                    <p>Thank You</p>\r\n                                </div>\r\n                            )}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default QuizMain\r\n","import React from 'react';\nimport QuizMain from './components/QuizMain'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        Quiz App\n      </header>\n      <QuizMain/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}